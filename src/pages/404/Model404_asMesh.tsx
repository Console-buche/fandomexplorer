/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useStoreNav } from '@/stores/storeNav';
import { useGLTF } from '@react-three/drei';
import { useEffect } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Text: THREE.Mesh;
  };
};

function createVector3Array(floatArray: Float32Array): THREE.Vector3[] {
  const vector3Array: THREE.Vector3[] = [];

  for (let i = 0; i < floatArray.length; i += 3) {
    const x = floatArray[i];
    const y = floatArray[i + 1];
    const z = floatArray[i + 2];
    const vector3 = new THREE.Vector3(x, y, z);
    vector3Array.push(vector3);
  }

  return vector3Array;
}

// TODO : Implement lookAt when 404. This is to be done in the shader

export function ModelAsMesh({ ...props }: JSX.IntrinsicElements['group']) {
  const setPositions404 = useStoreNav((state) => state.setPositions404);
  const { nodes } = useGLTF(
    'assets/model404_asMesh-transformed.glb'
  ) as GLTFResult;

  // @ts-ignore
  const v3s = createVector3Array(nodes.Text.geometry.attributes.position.array); // TODO : push the vectors to the navStore

  useEffect(() => {
    const aliveV3s = v3s.map((v) => v.clone().multiplyScalar(1.4));
    const unknownV3s = v3s.map((v) => v.clone().multiplyScalar(1.2));
    const deadV3s = v3s.map((v) => v.clone().multiplyScalar(0.3));
    setPositions404(aliveV3s, 'Alive');
    setPositions404(unknownV3s, 'unknown');
    setPositions404(deadV3s, 'Dead');
  }, [setPositions404, v3s]);

  return null;
}

useGLTF.preload('assets/model404_asMesh-transformed.glb');
